<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	元素标签说明
	cache – 给定命名空间的缓存配置。
	cache-ref – 其他命名空间缓存配置的引用。
	resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。
	sql – 可被其他语句引用的可重用语句块。
	insert – 映射插入语句
	update – 映射更新语句
	delete – 映射删除语句
	select – 映射查询语句
 -->

<!-- 命名空间取接口的全类名  -->
<mapper namespace="com.mvw.mybatis.dao.MyDao">

	<!-- 
		个人认为,将缓存放到DAO层，有点太细了，其实我们更多的是将接口结果直接缓存  
		<cache	eviction="FIFO"
			  flushInterval="60000"
			  size="512"
			  readOnly="true"/>
			这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,
			而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会 导致冲突。
			
			可用的收回策略有:
			    LRU – 最近最少使用的:移除最长时间不被使用的对象。
			    FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
			    SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。
			    WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。
			默认的是 LRU。
			
			 flushInterval(刷新间隔)可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段。
			 			      默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。
			 size(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024。

			 readOnly(只读)属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。
			   这提供了很重要的性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。 
	 -->
	 <!--  
    	<cache eviction="LRU" readOnly="true" type="com.mvw.mybatis.cache.MyCacheProvider" />
     -->
    
    <!-- 
 	 	结果集映射关系的定义，这是mybatis最复杂和强大的地方
    	javaBean和数据表字段的映射，若查询中指定了别名这里column就映射别名
    -->
	<resultMap id="resMap" type="myBean">
		<id property="id" column="_id" />
		<result property="time" column="_createTime" />
		<result property="name" column="_name" />
		<result property="content" column="_content" />
		<result property="score" column="_score" />
	</resultMap>
		
	<!-- 
		先看下resultMap的层次结构
		resultMap
		    constructor - 类在实例化时,用来注入结果到构造方法中
		        idArg - ID 参数;标记结果作为 ID 可以帮助提高整体效能
		        arg - 注入到构造方法的一个普通结果
		    id – 一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能
		    result – 注入到字段或 JavaBean 属性的普通结果
		    association – 一个复杂的类型关联;许多结果将包成这种类型
		       	 嵌入结果映射 – 结果映射自身的关联,或者参考一个
		    collection – 复杂类型的集
		       	 嵌入结果映射 – 结果映射自身的集,或者参考一个
		    discriminator – 使用结果值来决定使用哪个结果映射
		        case – 基于某些值的结果映射
		                        嵌入结果映射 – 这种情形结果也映射它本身,因此可以包含很多相 同的元素,或者它可以参照一个外部的结果映射
		        (鉴别器非常容易理 解,因为它的表现很像 Java 语言中的 switch 语句,可以根据值来进行不同的封装)
		                        
		复杂的映射， 通常逐步建立结果映射，开始简单一些,一步一步的发展                        
		
		下面这个是一个比较复杂点的映射
		联合查询需要借助与别名 ,不然多表名称相同时会混乱的  特别不建议使用嵌套查询(sqlN+1问题)，如:
		<association  select="selectAuthor"/>
		
		可以配置启用驼峰标识,在setting中
		mapUnderscoreToCamelCase=true
	-->
	<resultMap id="unionMap" type="user">
	     
	    <!-- 类自身属性 -->
	    <id property="id" column="id" />
	    <result property="name" column="name" />
	    
	    <!-- 对象属性 -->
	    <association property="myBean" javaType="myBean">
		    <id property="id" column="_id" />
			<result property="time" column="_createTime" />
			<result property="name" column="_name" />
			<result property="content" column="_content" />
			<result property="score" column="_score" />
	    </association>
	    
	    <!-- 集合属性   多列有名称冲突时，定义别名来解决-->
	    <collection property="list" javaType="ArrayList" ofType="subBean">
	      	<id property="id" column="sid" /><!-- column是查询时名称，可以指定别名 -->
	      	<result property="pid" column="spid" />
	      	<result property="name" column="sname" />
	    </collection>
	</resultMap>
	
	<!-- 返回Map<id,User> -->
	<resultMap type="com.mvw.mybatis.model.User" id="map3">
	     <id property="id" column="id" />
	    <result property="name" column="name" />
	</resultMap>
	
	<!--
		可以定义共用的sql语句，通过id引用
		<sql id=""></sql>
		<include refid="userColumns"/>
	-->
	
	<!-- 
		这里插入需要主键 
		parameterType 	将会传入这条语句的参数类的完全限定名或别名。
		这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 
		推断出具体传入语句的参数，默认值为 unset
	-->
	<insert id="add" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO t1(_createTime,_name,_content, _score,_status)
		VALUES(#{time}, #{name},#{content},#{score},#{status})
	</insert>
	
	<!-- 批量增加   简单的useGeneratedKeys="true" keyProperty="id"在3.3.1版本之前是不可行的  -->
	<insert id="addBatch" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO t1(_createTime,_name,_content, _score,_status) 
		VALUES
		<foreach collection="list" item="item" separator=","> 
			(#{item.time}, 
			#{item.name},
			#{item.content},
			#{item.score},
			#{item.status})
		</foreach>
	</insert>
	
	<!-- 
		从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，
		那应该是集合可以包含的类型，
		而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用
	-->
	<select id="getTest" resultType="java.lang.String">
		select name from t1 where id=#{0}
	</select>

	<select id="findAll" resultMap="resMap">
		select * from t1
		limit 0,100
	</select>
	
	<select id="findByName" resultMap="resMap">
		select * from t1 where _name=#{0}
		limit 0,100
	</select>
	
	<!-- 
		参数直接替换   ${id}可以理解为替换，不会预编译，注意防sql注入啊,
		返回是list<String>直接指定String就可以
		字符串替换:${xxx} 注意防sql注入
		预编译:#{xxx}
	 -->
	<select id="findAllName" resultType="String">
		select _name from t1 order by ${id}
	</select>
	
	<!-- 联合查询，封装复杂对象 -->
	<select id="findUser" resultMap="unionMap">
		SELECT u.*,t1.*,t2._id AS sid,t2._pid AS spid,t2._name AS sname FROM user u
		JOIN t1 ON u.id=t1._id
		JOIN t2 ON u.id=t2._pid
	</select>
	
	<select id="findById" resultMap="resMap">
		select _id,_name from t1 where _id=#{0}
	</select>
	
	<select id="getMap" resultType="java.util.HashMap">
		select id,name from t limit 0,10
	</select>
	
	<!-- 如此可以返回map<id,user> -->
	<select id="getMap2" resultMap="map3">
		select id,name from t limit 0,10
	</select>
	<!-- 
		&lt;          < 
	    &gt;          >  
	    &lt;&gt;      <>
	    &amp;         & 
	    &apos;        '
	    &quot;        "
	    = 就是上面这些转义字符后面加
	 -->
	 
	<!-- 参数是一个对象 -->
	<select id="findByBean" resultMap="resMap">
		 select * from t1 
	     <where>
	         <!-- id!=null && id>0 -->
	         <if test="id !=null and id &gt; 0">
	         		_id = #{id}
	         </if>
	         
	         <!-- name!=null -->
	         <if test="name !=null">
	         	   _name=#{name}
	         </if>
	     </where>
	</select>
	
	<!-- 参数是单个属性   @Param("id")指定名称 -->
	<select id="findByParams" resultMap="resMap">
		 select * from t1 
	     <where>
	         <!-- id!=null && id>0 -->
	         <if test="id !=null and id &gt; 0">
	         		_id = #{id}
	         </if>
	         
	         <!-- name!=null -->
	         <if test="name !=null">
	         	   _name=#{name}
	         </if>
	     </where>
	</select>
	
	<!-- foreach select -->
	<select id="findByIds" resultMap="resMap">
	  SELECT * FROM t1 WHERE _id in
	  <!-- collection=array/list 等等 实际是指定参数的类型 -->
	  <foreach item="item" collection="array" open="(" separator="," close=")">
	        #{item}
	  </foreach>
	</select>
	
	<!-- 参数用索引号代替比名称更好 -->
	<update id="update">
		update t1 set _status=#{0} where _id=#{1}
	</update>
	
	<delete id="del">
	    delete from t1 where _id=#{0}
	</delete>
	
	
	<!-- sql注入 -->
	<select id="sql_injection" resultMap="resMap">
		select * from t1 where _id='${id}'
	</select>
	
	<select id="sql_injection2" resultMap="resMap">
		select * from t1 where _name like #{name}
	</select>
	
	<select id="sql_injection3" resultMap="resMap">
		select * from t1 where _name like concat('%','${name}','%')
	</select>
</mapper>