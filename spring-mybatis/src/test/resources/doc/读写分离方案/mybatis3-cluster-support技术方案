1.环境与CRUD
2.插件开发等  	-->implements Interceptor
3.多数据源支持	-->extends AbstractRoutingDataSource,重写DefaultSqlSession
	3.1读写分离支持   
	3.2一写多读:涉及Load balancing
	3.3失败迁移和自动恢复:这个比较复杂，如下有实现方案
4.分别分库:获取数据源的时候，得有方法元信息，它就天生不支持，无能为力

#反正有很好的方案
#详细看com.mvw.rwsupport
#对传统JDBC的理解是所有封装的基础!!!

#DefaultSqlSession修改
捕获如下异常，其它地方去检查所有数据源：按照类型来检查
将不通的设置为失效数据源，获取的时候就不获取了
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
The last packet successfully received from the server was 25,411 milliseconds ago.  
The last packet sent successfully to the server was 15 milliseconds ago.
这里可以抽象出:负载均衡，失败迁移，失败恢复

//可以在这里扩展，支持多数据源(外加负载均衡策略)
@see com.mvw.rwsupport.DynamicDataSource
/**
 * 若是写，按照负载策略在预排数据源中拿一个，失败迁移和自动恢复
 * 
 * 1.失败迁移:放入失败集合从服务队列删除?何时放入,由谁放入？发现连接错误，给个标记，让认定者去检查，可以后再放入失败集合，
 * 次过程必须异步 2.失败队列做心跳检查
 */
对失败迁移和恢复找到了答案
预警通知，让维护人员去调整

#这是我想的分支
mybatis3-cluster-support
#主要扩展:3.1-3.3
给出配置示例和技术文档


比jade好的优势
1.sql分离
2.动态sql
3.自动生成

jade优势
1.自己研发优势
2.分表支持，分库有希望支持


1.任务调度器-quartz/pool
2.负载均衡器-随机或权重(写是否也加入读)
3.预警通知器-短信或email
4.管理查询器-servlet
5.数据源工厂
6.任务执行器-pool



