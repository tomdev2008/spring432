broker config

属性 	默认值 	描述
broker.id 		必填参数，broker的唯一标识
log.dirs 	/tmp/kafka-logs 	Kafka数据存放的目录。可以指定多个目录，中间用逗号分隔，当新partition被创建的时会被存放到当前存放partition最少的目录。
port 	9092 	BrokerServer接受客户端连接的端口号
zookeeper.connect 	null 	Zookeeper的连接串，格式为：hostname1:port1,hostname2:port2,hostname3:port3。可以填一个或多个，为了提高可靠性，建议都填上。注意，此配置允许我们指定一个zookeeper路径来存放此kafka集群的所有数据，为了与其他应用集群区分开，建议在此配置中指定本集群存放目录，格式为：hostname1:port1,hostname2:port2,hostname3:port3/chroot/path 。需要注意的是，消费者的参数要和此参数一致。
message.max.bytes 	1000000 	服务器可以接收到的最大的消息大小。注意此参数要和consumer的maximum.message.size大小一致，否则会因为生产者生产的消息太大导致消费者无法消费。
num.io.threads 	8 	服务器用来执行读写请求的IO线程数，此参数的数量至少要等于服务器上磁盘的数量。
queued.max.requests 	500 	I/O线程可以处理请求的队列大小，若实际请求数超过此大小，网络线程将停止接收新的请求。
socket.send.buffer.bytes 	100 * 1024 	The SO_SNDBUFF buffer the server prefers for socket connections.
socket.receive.buffer.bytes 	100 * 1024 	The SO_RCVBUFF buffer the server prefers for socket connections.
socket.request.max.bytes 	100 * 1024 * 1024 	服务器允许请求的最大值， 用来防止内存溢出，其值应该小于 Java heap size.
num.partitions 	1 	默认partition数量，如果topic在创建时没有指定partition数量，默认使用此值，建议改为5
log.segment.bytes 	1024 * 1024 * 1024 	Segment文件的大小，超过此值将会自动新建一个segment，此值可以被topic级别的参数覆盖。
log.roll.{ms,hours} 	24 * 7 hours 	新建segment文件的时间，此值可以被topic级别的参数覆盖。
log.retention.{ms,minutes,hours} 	7 days 	Kafka segment log的保存周期，保存周期超过此时间日志就会被删除。此参数可以被topic级别参数覆盖。数据量大时，建议减小此值。
log.retention.bytes 	-1 	每个partition的最大容量，若数据量超过此值，partition数据将会被删除。注意这个参数控制的是每个partition而不是topic。此参数可以被log级别参数覆盖。
log.retention.check.interval.ms 	5 minutes 	删除策略的检查周期
auto.create.topics.enable 	true 	自动创建topic参数，建议此值设置为false，严格控制topic管理，防止生产者错写topic。
default.replication.factor 	1 	默认副本数量，建议改为2。
replica.lag.time.max.ms 	10000 	在此窗口时间内没有收到follower的fetch请求，leader会将其从ISR(in-sync replicas)中移除。
replica.lag.max.messages 	4000 	如果replica节点落后leader节点此值大小的消息数量，leader节点就会将其从ISR中移除。
replica.socket.timeout.ms 	30 * 1000 	replica向leader发送请求的超时时间。
replica.socket.receive.buffer.bytes 	64 * 1024 	The socket receive buffer for network requests to the leader for replicating data.
replica.fetch.max.bytes 	1024 * 1024 	The number of byes of messages to attempt to fetch for each partition in the fetch requests the replicas send to the leader.
replica.fetch.wait.max.ms 	500 	The maximum amount of time to wait time for data to arrive on the leader in the fetch requests sent by the replicas to the leader.
num.replica.fetchers 	1 	Number of threads used to replicate messages from leaders. Increasing this value can increase the degree of I/O parallelism in the follower broker.
fetch.purgatory.purge.interval.requests 	1000 	The purge interval (in number of requests) of the fetch request purgatory.
zookeeper.session.timeout.ms 	6000 	ZooKeeper session 超时时间。如果在此时间内server没有向zookeeper发送心跳，zookeeper就会认为此节点已挂掉。 此值太低导致节点容易被标记死亡；若太高，.会导致太迟发现节点死亡。
zookeeper.connection.timeout.ms 	6000 	客户端连接zookeeper的超时时间。
zookeeper.sync.time.ms 	2000 	H ZK follower落后 ZK leader的时间。
controlled.shutdown.enable 	true 	允许broker shutdown。如果启用，broker在关闭自己之前会把它上面的所有leaders转移到其它brokers上，建议启用，增加集群稳定性。
auto.leader.rebalance.enable 	true 	If this is enabled the controller will automatically try to balance leadership for partitions among the brokers by periodically returning leadership to the “preferred” replica for each partition if it is available.
leader.imbalance.per.broker.percentage 	10 	The percentage of leader imbalance allowed per broker. The controller will rebalance leadership if this ratio goes above the configured value per broker.
leader.imbalance.check.interval.seconds 	300 	The frequency with which to check for leader imbalance.
offset.metadata.max.bytes 	4096 	The maximum amount of metadata to allow clients to save with their offsets.
connections.max.idle.ms 	600000 	Idle connections timeout: the server socket processor threads close the connections that idle more than this.
num.recovery.threads.per.data.dir 	1 	The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
unclean.leader.election.enable 	true 	Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss.
delete.topic.enable 	false 	启用deletetopic参数，建议设置为true。
offsets.topic.num.partitions 	50 	The number of partitions for the offset commit topic. Since changing this after deployment is currently unsupported, we recommend using a higher setting for production (e.g., 100-200).
offsets.topic.retention.minutes 	1440 	Offsets that are older than this age will be marked for deletion. The actual purge will occur when the log cleaner compacts the offsets topic.
offsets.retention.check.interval.ms 	600000 	The frequency at which the offset manager checks for stale offsets.
offsets.topic.replication.factor 	3 	The replication factor for the offset commit topic. A higher setting (e.g., three or four) is recommended in order to ensure higher availability. If the offsets topic is created when fewer brokers than the replication factor then the offsets topic will be created with fewer replicas.
offsets.topic.segment.bytes 	104857600 	Segment size for the offsets topic. Since it uses a compacted topic, this should be kept relatively low in order to facilitate faster log compaction and loads.
offsets.load.buffer.size 	5242880 	An offset load occurs when a broker becomes the offset manager for a set of consumer groups (i.e., when it becomes a leader for an offsets topic partition). This setting corresponds to the batch size (in bytes) to use when reading from the offsets segments when loading offsets into the offset manager’s cache.
offsets.commit.required.acks 	-1 	The number of acknowledgements that are required before the offset commit can be accepted. This is similar to the producer’s acknowledgement setting. In general, the default should not be overridden.
offsets.commit.timeout.ms 	5000 	The offset commit will be delayed until this timeout or the required number of replicas have received the offset commit. This is similar to the producer request timeout.

 

producer config
属性 	默认值 	描述
metadata.broker.list 		启动时producer查询brokers的列表，可以是集群中所有brokers的一个子集。注意，这个参数只是用来获取topic的元信息用，producer会从元信息中挑选合适的broker并与之建立socket连接。格式是：host1:port1,host2:port2。
request.required.acks 	0 	参见3.2节介绍
request.timeout.ms 	10000 	Broker等待ack的超时时间，若等待时间超过此值，会返回客户端错误信息。
producer.type 	sync 	同步异步模式。async表示异步，sync表示同步。如果设置成异步模式，可以允许生产者以batch的形式push数据，这样会极大的提高broker性能，推荐设置为异步。
serializer.class 	kafka.serializer.DefaultEncoder 	序列号类，.默认序列化成 byte[] 。
key.serializer.class 		Key的序列化类，默认同上。
partitioner.class 	kafka.producer.DefaultPartitioner 	Partition类，默认对key进行hash。
compression.codec 	none 	指定producer消息的压缩格式，可选参数为： “none”, “gzip” and “snappy”。关于压缩参见4.1节
compressed.topics 	null 	启用压缩的topic名称。若上面参数选择了一个压缩格式，那么压缩仅对本参数指定的topic有效，若本参数为空，则对所有topic有效。
message.send.max.retries 	3 	Producer发送失败时重试次数。若网络出现问题，可能会导致不断重试。
retry.backoff.ms 	100 	Before each retry, the producer refreshes the metadata of relevant topics to see if a new leader has been elected. Since leader election takes a bit of time, this property specifies the amount of time that the producer waits before refreshing the metadata.
topic.metadata.refresh.interval.ms 	600 * 1000 	The producer generally refreshes the topic metadata from brokers when there is a failure (partition missing, leader not available…). It will also poll regularly (default: every 10min so 600000ms). If you set this to a negative value, metadata will only get refreshed on failure. If you set this to zero, the metadata will get refreshed after each message sent (not recommended). Important note: the refresh happen only AFTER the message is sent, so if the producer never sends a message the metadata is never refreshed
queue.buffering.max.ms 	5000 	启用异步模式时，producer缓存消息的时间。比如我们设置成1000时，它会缓存1秒的数据再一次发送出去，这样可以极大的增加broker吞吐量，但也会造成时效性的降低。
queue.buffering.max.messages 	10000 	采用异步模式时producer buffer 队列里最大缓存的消息数量，如果超过这个数值，producer就会阻塞或者丢掉消息。
queue.enqueue.timeout.ms 	-1 	当达到上面参数值时producer阻塞等待的时间。如果值设置为0，buffer队列满时producer不会阻塞，消息直接被丢掉。若值设置为-1，producer会被阻塞，不会丢消息。
batch.num.messages 	200 	采用异步模式时，一个batch缓存的消息数量。达到这个数量值时producer才会发送消息。
send.buffer.bytes 	100 * 1024 	Socket write buffer size
client.id 	“” 	The client id is a user-specified string sent in each request to help trace calls. It should logically identify the application making the request.

 

consumer config
属性 	默认值 	描述
group.id 		Consumer的组ID，相同goup.id的consumer属于同一个组。
zookeeper.connect 		Consumer的zookeeper连接串，要和broker的配置一致。
consumer.id 	null 	如果不设置会自动生成。
socket.timeout.ms 	30 * 1000 	网络请求的socket超时时间。实际超时时间由max.fetch.wait + socket.timeout.ms 确定。
socket.receive.buffer.bytes 	64 * 1024 	The socket receive buffer for network requests.
fetch.message.max.bytes 	1024 * 1024 	查询topic-partition时允许的最大消息大小。consumer会为每个partition缓存此大小的消息到内存，因此，这个参数可以控制consumer的内存使用量。这个值应该至少比server允许的最大消息大小大，以免producer发送的消息大于consumer允许的消息。
num.consumer.fetchers 	1 	The number fetcher threads used to fetch data.
auto.commit.enable 	true 	如果此值设置为true，consumer会周期性的把当前消费的offset值保存到zookeeper。当consumer失败重启之后将会使用此值作为新开始消费的值。
auto.commit.interval.ms 	60 * 1000 	Consumer提交offset值到zookeeper的周期。
queued.max.message.chunks 	2 	用来被consumer消费的message chunks 数量， 每个chunk可以缓存fetch.message.max.bytes大小的数据量。
rebalance.max.retries 	4 	When a new consumer joins a consumer group the set of consumers attempt to “rebalance” the load to assign partitions to each consumer. If the set of consumers changes while this assignment is taking place the rebalance will fail and retry. This setting controls the maximum number of attempts before giving up.
fetch.min.bytes 	1 	The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request.
fetch.wait.max.ms 	100 	The maximum amount of time the server will block before answering the fetch request if there isn’t sufficient data to immediately satisfy fetch.min.bytes.
rebalance.backoff.ms 	2000 	Backoff time between retries during rebalance.
refresh.leader.backoff.ms 	200 	Backoff time to wait before trying to determine the leader of a partition that has just lost its leader.
auto.offset.reset 	largest 	What to do when there is no initial offset in ZooKeeper or if an offset is out of range ;smallest : automatically reset the offset to the smallest offset; largest : automatically reset the offset to the largest offset;anything else: throw exception to the consumer
consumer.timeout.ms 	-1 	若在指定时间内没有消息消费，consumer将会抛出异常。
exclude.internal.topics 	true 	Whether messages from internal topics (such as offsets) should be exposed to the consumer.
zookeeper.session.timeout.ms 	6000 	ZooKeeper session timeout. If the consumer fails to heartbeat to ZooKeeper for this period of time it is considered dead and a rebalance will occur.
zookeeper.connection.timeout.ms 	6000 	The max time that the client waits while establishing a connection to zookeeper.
zookeeper.sync.time.ms 	2000 	How far a ZK follower can be behind a ZK leader