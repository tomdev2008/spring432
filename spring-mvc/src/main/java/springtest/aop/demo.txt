经典：
	Before(前)  org.apringframework.aop.MethodBeforeAdvice
	After-returning(返回后) org.springframework.aop.AfterReturningAdvice
	After-throwing(抛出后) org.springframework.aop.ThrowsAdvice
	Arround(周围) org.aopaliance.intercept.MethodInterceptor
	Introduction(引入) org.springframework.aop.IntroductionInterceptor

#实现起来太麻烦
	1.创建通知：实现这几个接口，把其中的方法实现了
	2.定义切点和通知者：在Spring配制文件中配置这些信息
	3.使用ProxyFactoryBean来生成代理

如：
	<bean id="sleepHelper" class="test.spring.aop.bean.SleepHelper">
	</bean>
	
	<bean id="spleepPointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut">
	  <property name="pattern" value=".*sleep"/>
	</bean>
	
	<bean id="sleepHelperAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
	     <property name="advice" ref="sleepHelper"/>
	     <property name="pointcut" ref="sleepPointcut"/>
	</bean>
	
	<bean id="humanProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
	     <property name="target" ref="human"/>
	     <property name="interceptorNames" value="sleepHelperAdvisor" />
	     <property name="proxyInterfaces" value="test.spring.aop.bean.Sleepable" />
	</bean>
	
	
	
#自动代理
	<!--自动代理-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
	

注解方式：
	@Aspect
	public class SleepHelper {
	
	    public SleepHelper(){
	        
	    }
	    
	    @Pointcut("execution(* *.sleep())")
	    public void sleeppoint(){}
	    
	    @Before("sleeppoint()")
	    public void beforeSleep(){
	        System.out.println("睡觉前要脱衣服!");
	    }
	    
	    @AfterReturning("sleeppoint()")
	    public void afterSleep(){
	        System.out.println("睡醒了要穿衣服！");
	    }
	}
	
	<aop:aspectj-autoproxy/>
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	
#pojo切面【常用】
	<aop:advisor> 定义一个AOP通知者
	<aop:after> 后通知
	<aop:after-returning> 返回后通知
	<aop:after-throwing> 抛出后通知
	<aop:around> 周围通知
	<aop:aspect>定义一个切面
	<aop:before>前通知
	<aop:config>顶级配置元素，类似于<beans>这种东西
	<aop:pointcut>定义一个切点

	如：
	<aop:config>
	    <aop:aspect ref="sleepHelper">
	    <aop:before method="beforeSleep" pointcut="execution(* *.sleep(..))"/>
	    <aop:after method="afterSleep" pointcut="execution(* *.sleep(..))"/>
	    </aop:aspect>
	</aop:config>


	