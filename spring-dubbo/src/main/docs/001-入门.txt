http://dubbo.io/User+Guide-zh.htm

#学到才是自己的
#适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况

#测试干扰
1.只订阅     <dubbo:registry address="10.20.153.10:9090" register="false" />
2.点对点     url="dubbo://www.gtp.test.com:20880"


#协议选择参考
大数据用短连接协议，小数据大并发用长连接协议


#巧用版本号
当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用


#延迟暴露服务
<dubbo:service delay="5000" />


#日志策略
缺省自动查找：
    log4j
    slf4j
    jcl
    jdk
<dubbo:application logger="log4j" />


#协议等
    Transporter
        mina, netty, grizzy
    Serialization
        dubbo, hessian2, java, json
    Dispatcher
        all, direct, message, execution, connection
    ThreadPool
        fixed, cached

        
#原理层
 为什么要消费者比提供者个数多：
因dubbo协议采用单一长连接，
假设网络为千兆网卡(1024Mbit=128MByte)，
根据测试经验数据每条连接最多只能压满7MByte(不同的环境可能不一样，供参考)，
理论上1个服务提供者需要20个服务消费者才能压满网卡。

为什么不能传大包：
因dubbo协议采用单一长连接，
如果每次请求的数据包大小为500KByte，假设网络为千兆网卡(1024Mbit=128MByte)，每条连接最大7MByte(不同的环境可能不一样，供参考)，
单个服务提供者的TPS(每秒处理事务数)最大为：128MByte / 500KByte = 262。
单个消费者调用单个服务提供者的TPS(每秒处理事务数)最大为：7MByte / 500KByte = 14。
如果能接受，可以考虑使用，否则网络将成为瓶颈。

为什么采用异步单一长连接：
因为服务的现状大都是服务提供者少，通常只有几台机器，
而服务的消费者多，可能整个网站都在访问该服务，
比如Morgan的提供者只有6台提供者，却有上百台消费者，每天有1.5亿次调用，
如果采用常规的hessian服务，服务提供者很容易就被压跨，
通过单一连接，保证单一消费者不会压死提供者，
长连接，减少连接握手验证等，
并使用异步IO，复用线程池，防止C10K问题。


缺省主机端口与协议相关：
    dubbo: 20880
    rmi: 1099
    http: 80
    hessian: 80
    webservice: 80
    memcached: 11211
    redis: 6379
    
    
