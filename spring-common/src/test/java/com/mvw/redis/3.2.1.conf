# NETWORK 
bind 127.0.0.1		#为了安全期间可以绑定，并且只开放在内网
protected-mode yes	#可以禁用，在指定密码或bind情况下
port 6379
tcp-backlog 511		#backlog连接队列=未三次握手+已三次握手，和系统熟悉有关
timeout 0		#超时时间，单位为秒，0表示不限制
tcp-keepalive 300	#如果值非0，单位是秒，表示将周期性的使用SO_KEEPALIVE检测客户端是否还处于健康状态，避免服务器一直阻塞，官方给出的建议值是60S

# GENERAL 
daemonize no		#是否已守护线程模式启动，yes/no
supervised no
pidfile /var/run/redis_6379.pid		#daemonize=yes时,pid文件位置
loglevel notice		#日志级别和位置:debug、verbose、notice、warning
logfile ""
databases 16		#数据库个数，select(n)选择

# SNAPSHOTTING  
save 900 1		#快照模式,可以有多个,save ""表示禁用，save 900 1:900秒之后，且至少1次变更则快照一次。频率不要太高，RDB快照代价比较高
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes		#当持久化出现错误之后，是否继续提供写服务
rdbcompression yes			#持久化到RDB文件时，是否压缩
rdbchecksum yes				#读取和写入的时候是否支持CRC64校验
dbfilename dump.rdb			#快照文件名称和文件位置
dir ./

# REPLICATION 
slaveof <masterip> <masterport>	#主服务ip:port
masterauth <master-password>	#主服务pwd
slave-serve-stale-data yes	#当slave服务器和master服务器失去连接后，或者当数据正在复制传输的时候，slave服务器可以继续接受客户端的请求
slave-read-only yes		#slave服务器是否只读
repl-diskless-sync no		#切记:无磁盘复制还在实验中
repl-diskless-sync-delay 5
repl-disable-tcp-nodelay no	#向slave同步数据时，是否禁用socket的NO_DELAY。禁用则TCP协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到slave的时间
slave-priority 100		#在多个slave存在下，当master宕机时，Redis Sentinel会将priority值最小的slave提升为master。若为0，则此slave永远不会自动提升为master

# SECURITY 
requirepass admin	#密码，建议设置复杂些

# LIMITS 
maxclients 128		#限制客户端的连接数
maxmemory 2gb		#最大内存最好不要超过空闲内存的3/5
maxmemory-policy allkeys-lru	#4种策略volatile-lru、allkeys-lru、volatile-random、allkeys-random、noeviction根据LRU算法移除内存中所有的key
maxmemory-samples 5		#五个key然后取最旧的那个，LRU和最小TTL算法的优化	

# APPEND ONLY MODE 
appendonly no				#每一次写操作请求都追加到appendonly.aof 文件中，当redis 重新启动时，会从该文件恢复出之前的状态
appendfilename "appendonly.aof"		#aof文件名称
appendfsync everysec			#no(操作系统决定) >everysec(每秒写一次) > always(每次立马写入)
no-appendfsync-on-rewrite no		#写AOF的时候放弃同步主进程的变化，可能会丢日志，但是在高并发的时候不会出现一卡一卡的现象,默认是no
auto-aof-rewrite-percentage 100		#指定Redis重写aof文件的条件，默认为100，表示与上次rewrite的aof文件大小相比，当前aof文件增长量超过上次afo文件大小的100%时,0禁用
auto-aof-rewrite-min-size 64mb		#指定触发rewrite的aof文件大小。若aof文件小于该值，即使当前文件的增量比例达到auto-aof-rewrite-percentage的配置值，也不会触发自动rewrite
aof-load-truncated yes			#启动时可以加载被截断的AOF文件

# LUA SCRIPTING  
lua-time-limit 5000	#一个Lua脚本最长的执行时间为5000毫秒,0或负数表示无限执行时间

# REDIS CLUSTER

# SLOW LOG
slowlog-log-slower-than 1000000	#记录超过多少微秒的操作，1 second =  1000 millisecond =1000000 microseconds
slowlog-max-len 128		#记录128个

# LATENCY MONITOR 
latency-monitor-threshold 0	#用LATENCY打印redis实例在跑命令时的耗时图表，监视频率，0为不监视

# EVENT NOTIFICATION		#key改变通知，建议禁用，因为大部分场景用不到
notify-keyspace-events ""

# ADVANCED CONFIG 
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes				#哈希刷新，如果你不太在意延迟而希望尽快释放内存的话就设置为yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60	#buffer一旦超过256mb,或者超过64mb持续60秒，立即断开客户端连接
client-output-buffer-limit pubsub 32mb 8mb 60	#buffer一旦超过32mb,或者超过8mb持续60秒，立即断开客户端连接
hz 10						#内部调度（进行关闭timeout的客户端，删除过期key等等）频率
aof-rewrite-incremental-fsync yes		#rewrite过程中,每32M数据进行一次文件同步,这样可以减少aof大文件写入对磁盘的操作次数