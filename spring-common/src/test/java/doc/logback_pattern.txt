转换符 作用
c {length }
lo {length }
logger {length } 	输出日志的logger名，可有一个整形参数，功能是缩短logger名，设置为0表示只输入logger最右边点符号之后的字符串。 
Conversion specifier Logger name Result
%logger 	mainPackage.sub.sample.Bar 	mainPackage.sub.sample.Bar
%logger{0} 	mainPackage.sub.sample.Bar 	Bar
%logger{5} 	mainPackage.sub.sample.Bar 	m.s.s.Bar
%logger{10} 	mainPackage.sub.sample.Bar 	m.s.s.Bar
%logger{15} 	mainPackage.sub.sample.Bar 	m.s.sample.Bar
%logger{16} 	mainPackage.sub.sample.Bar 	m.sub.sample.Bar
%logger{26} 	mainPackage.sub.sample.Bar 	mainPackage.sub.sample.Bar

 
C {length }
class {length } 	输出执行记录请求的调用者的全限定名。参数与上面的一样。尽量避免使用，除非执行速度不造成任何问题。
contextName
cn 	输出上下文名称。
d {pattern }
date {pattern } 	输出日志的打印日志，模式语法与java.text.SimpleDateFormat 兼容。 Conversion Pattern Result
%d 	2006-10-20 14:06:49,812
%date 	2006-10-20 14:06:49,812
%date{ISO8601} 	2006-10-20 14:06:49,812
%date{HH:mm:ss.SSS} 	14:06:49.812
%date{dd MMM yyyy ;HH:mm:ss.SSS} 	20 oct. 2006;14:06:49.812
F / file 	输出执行记录请求的java源文件名。尽量避免使用，除非执行速度不造成任何问题。
caller{depth} caller{depth, evaluator-1, ... evaluator-n} 	输出生成日志的调用者的位置信息，整数选项表示输出信息深度。

例如， %caller{2}   输出为：

0    [main] DEBUG - logging statement 
Caller+0   at mainPackage.sub.sample.Bar.sampleMethodName(Bar.java:22)
Caller+1   at mainPackage.sub.sample.Bar.createLoggingRequest(Bar.java:17)

例如， %caller{3}   输出为：

16   [main] DEBUG - logging statement 
Caller+0   at mainPackage.sub.sample.Bar.sampleMethodName(Bar.java:22)
Caller+1   at mainPackage.sub.sample.Bar.createLoggingRequest(Bar.java:17)
Caller+2   at mainPackage.ConfigTester.main(ConfigTester.java:38)

L / line 	输出执行日志请求的行号。尽量避免使用，除非执行速度不造成任何问题。
m / msg / message 	

输出应用程序提供的信息。
M / method 	输出执行日志请求的方法名。尽量避免使用，除非执行速度不造成任何问题。
n 	输出平台先关的分行符“\n”或者“\r\n”。
p / le / level 	输出日志级别。
r / relative 	输出从程序启动到创建日志记录的时间，单位是毫秒
t / thread 	输出产生日志的线程名。
replace(p ){r, t} 	

p 为日志内容，r 是正则表达式，将p 中符合r 的内容替换为t 。

例如， "%replace(%msg){'\s', ''}"


总结:
 %d{yyyy-MM-dd HH:mm:ss} [%level] - %msg%n
  Logger: %logger
  Class: %class
  File: %file
  Caller: %caller
  Line: %line
  Message: %m
  Method: %M
  Relative: %relative
  Thread: %thread
  Exception: %ex
  xException: %xEx
  nopException: %nopex
  rException: %rEx
  Marker: %marker
  %n