ElasticSearch中可以通过filter或者query来获取满足特定条件的文档，但是它们的实现和目的有一些不同之处。Filter作用于有确定值的字段，
判断这些字段是否满足特定的条件。例如：
1.CreateDate字段的值是否在2013年到2014年之间？
2.作者字段的值是否包含“不二”？
3.lat_lon字段的值是否在给定点的10km范围之内？

Query和filter类似，它也会判断字段是否满足特定的条件，但同时它也会计算文档和query之间的相关性。例如：

1.和”全文索引”查询最为匹配的文档
2.包含”run”的文档，也可以返回包含”running”，”runs”,”jog”等关键词的文档。
3.同时包含”quik”, “brown”和”fox”三个关键词的文档，并且关键词在文档中的位置越近，则文档中的相关性越高。

Query会计算文档和query之间的相关性，并将结果存放到_score字段中，随后_score被用来对匹配到的文档进行排序。

性能上的差异

Filter查询计算速度很快并且可以十分方便地在内存中缓存filter匹配到的文本，缓存时，每个文档只会在内存中占用一个bit，
所以缓存不会带来太多的内存消耗。当查询结果在内存中缓存中，随后的查询可以重用这些结果而不用重新计算。

Query在找出匹配的文档时，还要计算文档文档的相关性，所以一般query比filter更重些，并且ES不支持对query的结果进行缓存。

搜索引擎底层使用了倒排索引，如果query仅仅匹配到了少量的文档，那么query的查询速度要快于缓存的filter，但是一般来说使用了缓存的
filter比query要快。Filter的目标就是尽量减少query需要处理的文档的数目。

什么时候用query，什么时候用filter

一般来说，需要计算文档和query的相关性时，我们需要使用到query，其他时候我们都应该使用filter。


过滤器（filter）通常用于过滤文档的范围，比如某个字段是否属于某个类型，或者是属于哪个时间区间
* 创建日期是否在2014-2015年间？
* status字段是否为success？
* lat_lon字段是否在某个坐标的10公里范围内？

查询器（query）的使用方法像极了filter，但query更倾向于更准确的查找。

* 与full text search的匹配度最高

* 正则匹配

* 包含run单词，如果包含这些单词：runs、running、jog、sprint，也被视为包含run单词
* 包含quick、brown、fox。这些词越接近，这份文档的相关性就越高
查询器会计算出每份文档对于某次查询有多相关（relevant），然后分配文档一个相关性分数：_score。而这个
分数会被用来对匹配了的文档进行相关性排序。相关性概念十分适合全文搜索（full-text search），这个
很难能给出完整、“正确”答案的领域。

query filter在性能上对比：filter是不计算相关性的，同时可以cache。因此，filter速度要快于query。


#借助于filter的速度可以快速过滤出文档，然后再由query根据条件来匹配？？？
